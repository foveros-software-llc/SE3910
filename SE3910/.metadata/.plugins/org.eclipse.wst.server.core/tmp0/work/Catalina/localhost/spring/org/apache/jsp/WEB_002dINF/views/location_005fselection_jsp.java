/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.27
 * Generated at: 2019-04-15 18:07:31 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class location_005fselection_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/stylesheet.css\"/>\r\n");
      out.write("\t<meta charset=\"ISO-8859-1\">\r\n");
      out.write("\t<title>Insert title here</title>\r\n");
      out.write("\t<meta name=\"viewport\" content=\"initial-scale=1.0\">\r\n");
      out.write("    <style>\r\n");
      out.write("      /* Always set the map height explicitly to define the size of the div\r\n");
      out.write("       * element that contains the map. */\r\n");
      out.write("      #map {\r\n");
      out.write("        width: 100%;\r\n");
      out.write("        height: 50%;\r\n");
      out.write("        background-color: grey;\r\n");
      out.write("      }\r\n");
      out.write("      /* Makes the page fill the window. */\r\n");
      out.write("      html, body {\r\n");
      out.write("        height: 100%;\r\n");
      out.write("        margin: 0;\r\n");
      out.write("        padding: 0;\r\n");
      out.write("      }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body style=\"margin:0px; padding:0px;\" onload=\"initMap()\">\r\n");
      out.write("\t<h1>Which location works best for you?</h1>\r\n");
      out.write("    <div>\r\n");
      out.write("         <label for=\"raddressInput\">Search location:</label>\r\n");
      out.write("         <input type=\"text\" id=\"addressInput\" size=\"15\"/>\r\n");
      out.write("        <label for=\"radiusSelect\">Radius:</label>\r\n");
      out.write("        <select id=\"radiusSelect\" label=\"Radius\">\r\n");
      out.write("          <option value=\"50\" selected>50 kms</option>\r\n");
      out.write("          <option value=\"30\">30 kms</option>\r\n");
      out.write("          <option value=\"20\">20 kms</option>\r\n");
      out.write("          <option value=\"10\">10 kms</option>\r\n");
      out.write("        </select>\r\n");
      out.write("\r\n");
      out.write("        <input type=\"button\" id=\"searchButton\" value=\"Search\"/>\r\n");
      out.write("    </div>\r\n");
      out.write("    <div><select id=\"locationSelect\" style=\"width: 10%; visibility: hidden\"></select></div>\r\n");
      out.write("\t<div id=\"map\"></div>\r\n");
      out.write("    <script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("\t\tvar map;\r\n");
      out.write("    \t\r\n");
      out.write("\t\t// Initialize and add the map\r\n");
      out.write("\t\tfunction initMap() {\r\n");
      out.write("  \t\t\t// The location of the default center of the map\r\n");
      out.write("  \t\t\tvar center = {lat: 39.0997, lng: -94.5786};\r\n");
      out.write("  \t\t\t// The map centered \r\n");
      out.write("  \t\t\tmap = new google.maps.Map(\r\n");
      out.write("      \t\t\tdocument.getElementById('map'), {zoom: 11, center: center});\r\n");
      out.write("\r\n");
      out.write("  \t\t\t// Example Marker\r\n");
      out.write("  \t\t\tvar marker = new google.maps.Marker({position: {lat: 39.0997, lng: -94.5786}, map: map});\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t    function triggerInput() {\r\n");
      out.write("\t        var zipCode = document.getElementById('addressInput').value;\r\n");
      out.write("\t     \t// This is creating the GeocoderRequest object\r\n");
      out.write("\t        var geocoderRequest = {address: zipCode}\r\n");
      out.write("\t        var geocoder = new google.maps.Geocoder();\r\n");
      out.write("\t     \t// This is making the Geocode request\r\n");
      out.write("\t        geocoder.geocode(geocoderRequest, function(results, status) {\r\n");
      out.write("\t        \t// Check if status is OK before proceeding\r\n");
      out.write("\t            if (status == google.maps.GeocoderStatus.OK) {\r\n");
      out.write("\t            \t// Center the map on the returned location\r\n");
      out.write("\t                map.setCenter(results[0].geometry.location);\r\n");
      out.write("\t                map.setZoom(11);\r\n");
      out.write("\t            \tconsole.log(results);\r\n");
      out.write("\t            \tsearchLocationsNear(results[0].geometry.location);\r\n");
      out.write("\t            } else {\r\n");
      out.write("\t                alert(address + ' not found');\r\n");
      out.write("\t            }\r\n");
      out.write("\t        })\r\n");
      out.write("\t    }\r\n");
      out.write("    \tdocument.getElementById('searchButton')\r\n");
      out.write("    \t\t\t.addEventListener('click', triggerInput, false);\r\n");
      out.write("    </script>\r\n");
      out.write("    <script async defer \r\n");
      out.write("    src=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyBcH0cL9aL8PDd0Cww0Alxjez0rh2vtZkQ&callback=initMap\">\r\n");
      out.write("    </script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
